package com.pouillcorp.sortirnice.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.pouillcorp.sortirnice.entities.entry.join.JoinEntryEntityWithEntryContactEntity;

import com.pouillcorp.sortirnice.entities.entry.detail.EntryContactEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ENTRY_CONTACT_ENTITY".
*/
public class EntryContactEntityDao extends AbstractDao<EntryContactEntity, Long> {

    public static final String TABLENAME = "ENTRY_CONTACT_ENTITY";

    /**
     * Properties of entity EntryContactEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Civility = new Property(1, String.class, "civility", false, "CIVILITY");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Function = new Property(4, String.class, "function", false, "FUNCTION");
        public final static Property Phone = new Property(5, String.class, "phone", false, "PHONE");
        public final static Property Email = new Property(6, String.class, "email", false, "EMAIL");
    }

    private Query<EntryContactEntity> entryEntity_ListContactsQuery;

    public EntryContactEntityDao(DaoConfig config) {
        super(config);
    }
    
    public EntryContactEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ENTRY_CONTACT_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CIVILITY\" TEXT," + // 1: civility
                "\"NAME\" TEXT," + // 2: name
                "\"TITLE\" TEXT," + // 3: title
                "\"FUNCTION\" TEXT," + // 4: function
                "\"PHONE\" TEXT," + // 5: phone
                "\"EMAIL\" TEXT);"); // 6: email
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ENTRY_CONTACT_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EntryContactEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String civility = entity.getCivility();
        if (civility != null) {
            stmt.bindString(2, civility);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String function = entity.getFunction();
        if (function != null) {
            stmt.bindString(5, function);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EntryContactEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String civility = entity.getCivility();
        if (civility != null) {
            stmt.bindString(2, civility);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String function = entity.getFunction();
        if (function != null) {
            stmt.bindString(5, function);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EntryContactEntity readEntity(Cursor cursor, int offset) {
        EntryContactEntity entity = new EntryContactEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // civility
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // function
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // email
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EntryContactEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCivility(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFunction(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEmail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EntryContactEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EntryContactEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EntryContactEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "listContacts" to-many relationship of EntryEntity. */
    public List<EntryContactEntity> _queryEntryEntity_ListContacts(Long entryEntityId) {
        synchronized (this) {
            if (entryEntity_ListContactsQuery == null) {
                QueryBuilder<EntryContactEntity> queryBuilder = queryBuilder();
                queryBuilder.join(JoinEntryEntityWithEntryContactEntity.class, JoinEntryEntityWithEntryContactEntityDao.Properties.EntryContactEntityId)
                    .where(JoinEntryEntityWithEntryContactEntityDao.Properties.EntryEntityId.eq(entryEntityId));
                entryEntity_ListContactsQuery = queryBuilder.build();
            }
        }
        Query<EntryContactEntity> query = entryEntity_ListContactsQuery.forCurrentThread();
        query.setParameter(0, entryEntityId);
        return query.list();
    }

}
