package com.pouillcorp.sortirnice.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pouillcorp.sortirnice.entities.event.EventSauvegardeEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVENT_SAUVEGARDE_ENTITY".
*/
public class EventSauvegardeEntityDao extends AbstractDao<EventSauvegardeEntity, Long> {

    public static final String TABLENAME = "EVENT_SAUVEGARDE_ENTITY";

    /**
     * Properties of entity EventSauvegardeEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EventId = new Property(1, Long.class, "eventId", false, "EVENT_ID");
        public final static Property NameFr = new Property(2, String.class, "nameFr", false, "NAME_FR");
        public final static Property Start = new Property(3, String.class, "start", false, "START");
        public final static Property End = new Property(4, String.class, "end", false, "END");
        public final static Property AdressContent = new Property(5, String.class, "adressContent", false, "ADRESS_CONTENT");
        public final static Property AdressZip = new Property(6, String.class, "adressZip", false, "ADRESS_ZIP");
        public final static Property AdressCity = new Property(7, String.class, "adressCity", false, "ADRESS_CITY");
        public final static Property Phone = new Property(8, String.class, "phone", false, "PHONE");
        public final static Property Email = new Property(9, String.class, "email", false, "EMAIL");
        public final static Property WebsiteSituation = new Property(10, String.class, "websiteSituation", false, "WEBSITE_SITUATION");
        public final static Property WebsitePrincipal = new Property(11, String.class, "websitePrincipal", false, "WEBSITE_PRINCIPAL");
        public final static Property Profile = new Property(12, String.class, "profile", false, "PROFILE");
        public final static Property Station = new Property(13, String.class, "station", false, "STATION");
        public final static Property Category = new Property(14, String.class, "category", false, "CATEGORY");
        public final static Property Option = new Property(15, String.class, "option", false, "OPTION");
        public final static Property Secto = new Property(16, String.class, "secto", false, "SECTO");
        public final static Property DescriptionSituation = new Property(17, String.class, "descriptionSituation", false, "DESCRIPTION_SITUATION");
        public final static Property DescriptionHoraires = new Property(18, String.class, "descriptionHoraires", false, "DESCRIPTION_HORAIRES");
        public final static Property DescriptionTarification = new Property(19, String.class, "descriptionTarification", false, "DESCRIPTION_TARIFICATION");
        public final static Property DescriptionDescription = new Property(20, String.class, "descriptionDescription", false, "DESCRIPTION_DESCRIPTION");
        public final static Property Image = new Property(21, String.class, "image", false, "IMAGE");
        public final static Property Latitude = new Property(22, double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(23, double.class, "longitude", false, "LONGITUDE");
        public final static Property Note = new Property(24, int.class, "note", false, "NOTE");
        public final static Property EntryId = new Property(25, String.class, "entryId", false, "ENTRY_ID");
        public final static Property EntryName = new Property(26, String.class, "entryName", false, "ENTRY_NAME");
        public final static Property Created = new Property(27, String.class, "created", false, "CREATED");
        public final static Property Updated = new Property(28, String.class, "updated", false, "UPDATED");
    }


    public EventSauvegardeEntityDao(DaoConfig config) {
        super(config);
    }
    
    public EventSauvegardeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVENT_SAUVEGARDE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"EVENT_ID\" INTEGER," + // 1: eventId
                "\"NAME_FR\" TEXT," + // 2: nameFr
                "\"START\" TEXT," + // 3: start
                "\"END\" TEXT," + // 4: end
                "\"ADRESS_CONTENT\" TEXT," + // 5: adressContent
                "\"ADRESS_ZIP\" TEXT," + // 6: adressZip
                "\"ADRESS_CITY\" TEXT," + // 7: adressCity
                "\"PHONE\" TEXT," + // 8: phone
                "\"EMAIL\" TEXT," + // 9: email
                "\"WEBSITE_SITUATION\" TEXT," + // 10: websiteSituation
                "\"WEBSITE_PRINCIPAL\" TEXT," + // 11: websitePrincipal
                "\"PROFILE\" TEXT," + // 12: profile
                "\"STATION\" TEXT," + // 13: station
                "\"CATEGORY\" TEXT," + // 14: category
                "\"OPTION\" TEXT," + // 15: option
                "\"SECTO\" TEXT," + // 16: secto
                "\"DESCRIPTION_SITUATION\" TEXT," + // 17: descriptionSituation
                "\"DESCRIPTION_HORAIRES\" TEXT," + // 18: descriptionHoraires
                "\"DESCRIPTION_TARIFICATION\" TEXT," + // 19: descriptionTarification
                "\"DESCRIPTION_DESCRIPTION\" TEXT," + // 20: descriptionDescription
                "\"IMAGE\" TEXT," + // 21: image
                "\"LATITUDE\" REAL NOT NULL ," + // 22: latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 23: longitude
                "\"NOTE\" INTEGER NOT NULL ," + // 24: note
                "\"ENTRY_ID\" TEXT," + // 25: entryId
                "\"ENTRY_NAME\" TEXT," + // 26: entryName
                "\"CREATED\" TEXT," + // 27: created
                "\"UPDATED\" TEXT);"); // 28: updated
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVENT_SAUVEGARDE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EventSauvegardeEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long eventId = entity.getEventId();
        if (eventId != null) {
            stmt.bindLong(2, eventId);
        }
 
        String nameFr = entity.getNameFr();
        if (nameFr != null) {
            stmt.bindString(3, nameFr);
        }
 
        String start = entity.getStart();
        if (start != null) {
            stmt.bindString(4, start);
        }
 
        String end = entity.getEnd();
        if (end != null) {
            stmt.bindString(5, end);
        }
 
        String adressContent = entity.getAdressContent();
        if (adressContent != null) {
            stmt.bindString(6, adressContent);
        }
 
        String adressZip = entity.getAdressZip();
        if (adressZip != null) {
            stmt.bindString(7, adressZip);
        }
 
        String adressCity = entity.getAdressCity();
        if (adressCity != null) {
            stmt.bindString(8, adressCity);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(10, email);
        }
 
        String websiteSituation = entity.getWebsiteSituation();
        if (websiteSituation != null) {
            stmt.bindString(11, websiteSituation);
        }
 
        String websitePrincipal = entity.getWebsitePrincipal();
        if (websitePrincipal != null) {
            stmt.bindString(12, websitePrincipal);
        }
 
        String profile = entity.getProfile();
        if (profile != null) {
            stmt.bindString(13, profile);
        }
 
        String station = entity.getStation();
        if (station != null) {
            stmt.bindString(14, station);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(15, category);
        }
 
        String option = entity.getOption();
        if (option != null) {
            stmt.bindString(16, option);
        }
 
        String secto = entity.getSecto();
        if (secto != null) {
            stmt.bindString(17, secto);
        }
 
        String descriptionSituation = entity.getDescriptionSituation();
        if (descriptionSituation != null) {
            stmt.bindString(18, descriptionSituation);
        }
 
        String descriptionHoraires = entity.getDescriptionHoraires();
        if (descriptionHoraires != null) {
            stmt.bindString(19, descriptionHoraires);
        }
 
        String descriptionTarification = entity.getDescriptionTarification();
        if (descriptionTarification != null) {
            stmt.bindString(20, descriptionTarification);
        }
 
        String descriptionDescription = entity.getDescriptionDescription();
        if (descriptionDescription != null) {
            stmt.bindString(21, descriptionDescription);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(22, image);
        }
        stmt.bindDouble(23, entity.getLatitude());
        stmt.bindDouble(24, entity.getLongitude());
        stmt.bindLong(25, entity.getNote());
 
        String entryId = entity.getEntryId();
        if (entryId != null) {
            stmt.bindString(26, entryId);
        }
 
        String entryName = entity.getEntryName();
        if (entryName != null) {
            stmt.bindString(27, entryName);
        }
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(28, created);
        }
 
        String updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindString(29, updated);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EventSauvegardeEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long eventId = entity.getEventId();
        if (eventId != null) {
            stmt.bindLong(2, eventId);
        }
 
        String nameFr = entity.getNameFr();
        if (nameFr != null) {
            stmt.bindString(3, nameFr);
        }
 
        String start = entity.getStart();
        if (start != null) {
            stmt.bindString(4, start);
        }
 
        String end = entity.getEnd();
        if (end != null) {
            stmt.bindString(5, end);
        }
 
        String adressContent = entity.getAdressContent();
        if (adressContent != null) {
            stmt.bindString(6, adressContent);
        }
 
        String adressZip = entity.getAdressZip();
        if (adressZip != null) {
            stmt.bindString(7, adressZip);
        }
 
        String adressCity = entity.getAdressCity();
        if (adressCity != null) {
            stmt.bindString(8, adressCity);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(10, email);
        }
 
        String websiteSituation = entity.getWebsiteSituation();
        if (websiteSituation != null) {
            stmt.bindString(11, websiteSituation);
        }
 
        String websitePrincipal = entity.getWebsitePrincipal();
        if (websitePrincipal != null) {
            stmt.bindString(12, websitePrincipal);
        }
 
        String profile = entity.getProfile();
        if (profile != null) {
            stmt.bindString(13, profile);
        }
 
        String station = entity.getStation();
        if (station != null) {
            stmt.bindString(14, station);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(15, category);
        }
 
        String option = entity.getOption();
        if (option != null) {
            stmt.bindString(16, option);
        }
 
        String secto = entity.getSecto();
        if (secto != null) {
            stmt.bindString(17, secto);
        }
 
        String descriptionSituation = entity.getDescriptionSituation();
        if (descriptionSituation != null) {
            stmt.bindString(18, descriptionSituation);
        }
 
        String descriptionHoraires = entity.getDescriptionHoraires();
        if (descriptionHoraires != null) {
            stmt.bindString(19, descriptionHoraires);
        }
 
        String descriptionTarification = entity.getDescriptionTarification();
        if (descriptionTarification != null) {
            stmt.bindString(20, descriptionTarification);
        }
 
        String descriptionDescription = entity.getDescriptionDescription();
        if (descriptionDescription != null) {
            stmt.bindString(21, descriptionDescription);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(22, image);
        }
        stmt.bindDouble(23, entity.getLatitude());
        stmt.bindDouble(24, entity.getLongitude());
        stmt.bindLong(25, entity.getNote());
 
        String entryId = entity.getEntryId();
        if (entryId != null) {
            stmt.bindString(26, entryId);
        }
 
        String entryName = entity.getEntryName();
        if (entryName != null) {
            stmt.bindString(27, entryName);
        }
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(28, created);
        }
 
        String updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindString(29, updated);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EventSauvegardeEntity readEntity(Cursor cursor, int offset) {
        EventSauvegardeEntity entity = new EventSauvegardeEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // eventId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nameFr
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // start
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // end
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // adressContent
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // adressZip
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // adressCity
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // phone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // email
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // websiteSituation
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // websitePrincipal
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // profile
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // station
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // category
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // option
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // secto
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // descriptionSituation
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // descriptionHoraires
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // descriptionTarification
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // descriptionDescription
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // image
            cursor.getDouble(offset + 22), // latitude
            cursor.getDouble(offset + 23), // longitude
            cursor.getInt(offset + 24), // note
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // entryId
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // entryName
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // created
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28) // updated
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EventSauvegardeEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEventId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setNameFr(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStart(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEnd(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAdressContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAdressZip(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAdressCity(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEmail(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWebsiteSituation(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setWebsitePrincipal(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setProfile(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setStation(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCategory(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setOption(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSecto(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDescriptionSituation(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDescriptionHoraires(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setDescriptionTarification(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setDescriptionDescription(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setImage(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setLatitude(cursor.getDouble(offset + 22));
        entity.setLongitude(cursor.getDouble(offset + 23));
        entity.setNote(cursor.getInt(offset + 24));
        entity.setEntryId(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setEntryName(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setCreated(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setUpdated(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EventSauvegardeEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EventSauvegardeEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EventSauvegardeEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
