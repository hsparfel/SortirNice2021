package com.pouillcorp.sortirnice.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.pouillcorp.sortirnice.entities.entry.join.JoinEntryEntityWithEntryOpeningEntity;

import com.pouillcorp.sortirnice.entities.entry.detail.EntryOpeningEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ENTRY_OPENING_ENTITY".
*/
public class EntryOpeningEntityDao extends AbstractDao<EntryOpeningEntity, Long> {

    public static final String TABLENAME = "ENTRY_OPENING_ENTITY";

    /**
     * Properties of entity EntryOpeningEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OpeningStart = new Property(1, String.class, "openingStart", false, "OPENING_START");
        public final static Property OpeningEnd = new Property(2, String.class, "openingEnd", false, "OPENING_END");
        public final static Property OpeningReplay = new Property(3, String.class, "openingReplay", false, "OPENING_REPLAY");
    }

    private DaoSession daoSession;

    private Query<EntryOpeningEntity> entryEntity_ListOpeningsQuery;

    public EntryOpeningEntityDao(DaoConfig config) {
        super(config);
    }
    
    public EntryOpeningEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ENTRY_OPENING_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OPENING_START\" TEXT," + // 1: openingStart
                "\"OPENING_END\" TEXT," + // 2: openingEnd
                "\"OPENING_REPLAY\" TEXT);"); // 3: openingReplay
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ENTRY_OPENING_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EntryOpeningEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String openingStart = entity.getOpeningStart();
        if (openingStart != null) {
            stmt.bindString(2, openingStart);
        }
 
        String openingEnd = entity.getOpeningEnd();
        if (openingEnd != null) {
            stmt.bindString(3, openingEnd);
        }
 
        String openingReplay = entity.getOpeningReplay();
        if (openingReplay != null) {
            stmt.bindString(4, openingReplay);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EntryOpeningEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String openingStart = entity.getOpeningStart();
        if (openingStart != null) {
            stmt.bindString(2, openingStart);
        }
 
        String openingEnd = entity.getOpeningEnd();
        if (openingEnd != null) {
            stmt.bindString(3, openingEnd);
        }
 
        String openingReplay = entity.getOpeningReplay();
        if (openingReplay != null) {
            stmt.bindString(4, openingReplay);
        }
    }

    @Override
    protected final void attachEntity(EntryOpeningEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EntryOpeningEntity readEntity(Cursor cursor, int offset) {
        EntryOpeningEntity entity = new EntryOpeningEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // openingStart
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // openingEnd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // openingReplay
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EntryOpeningEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOpeningStart(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOpeningEnd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOpeningReplay(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EntryOpeningEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EntryOpeningEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EntryOpeningEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "listOpenings" to-many relationship of EntryEntity. */
    public List<EntryOpeningEntity> _queryEntryEntity_ListOpenings(Long entryEntityId) {
        synchronized (this) {
            if (entryEntity_ListOpeningsQuery == null) {
                QueryBuilder<EntryOpeningEntity> queryBuilder = queryBuilder();
                queryBuilder.join(JoinEntryEntityWithEntryOpeningEntity.class, JoinEntryEntityWithEntryOpeningEntityDao.Properties.EntryOpeningEntityId)
                    .where(JoinEntryEntityWithEntryOpeningEntityDao.Properties.EntryEntityId.eq(entryEntityId));
                entryEntity_ListOpeningsQuery = queryBuilder.build();
            }
        }
        Query<EntryOpeningEntity> query = entryEntity_ListOpeningsQuery.forCurrentThread();
        query.setParameter(0, entryEntityId);
        return query.list();
    }

}
