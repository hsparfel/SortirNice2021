package com.pouillcorp.sortirnice.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pouillcorp.sortirnice.entities.entry.detail.EntryCapacityEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ENTRY_CAPACITY_ENTITY".
*/
public class EntryCapacityEntityDao extends AbstractDao<EntryCapacityEntity, Long> {

    public static final String TABLENAME = "ENTRY_CAPACITY_ENTITY";

    /**
     * Properties of entity EntryCapacityEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Total = new Property(1, int.class, "total", false, "TOTAL");
        public final static Property Indoor = new Property(2, int.class, "indoor", false, "INDOOR");
        public final static Property Outdoor = new Property(3, int.class, "outdoor", false, "OUTDOOR");
        public final static Property Seated = new Property(4, int.class, "seated", false, "SEATED");
        public final static Property Cocktail = new Property(5, int.class, "cocktail", false, "COCKTAIL");
        public final static Property Group = new Property(6, int.class, "group", false, "GROUP");
        public final static Property RoomCount = new Property(7, int.class, "roomCount", false, "ROOM_COUNT");
        public final static Property DisabledCount = new Property(8, int.class, "disabledCount", false, "DISABLED_COUNT");
    }


    public EntryCapacityEntityDao(DaoConfig config) {
        super(config);
    }
    
    public EntryCapacityEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ENTRY_CAPACITY_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TOTAL\" INTEGER NOT NULL ," + // 1: total
                "\"INDOOR\" INTEGER NOT NULL ," + // 2: indoor
                "\"OUTDOOR\" INTEGER NOT NULL ," + // 3: outdoor
                "\"SEATED\" INTEGER NOT NULL ," + // 4: seated
                "\"COCKTAIL\" INTEGER NOT NULL ," + // 5: cocktail
                "\"GROUP\" INTEGER NOT NULL ," + // 6: group
                "\"ROOM_COUNT\" INTEGER NOT NULL ," + // 7: roomCount
                "\"DISABLED_COUNT\" INTEGER NOT NULL );"); // 8: disabledCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ENTRY_CAPACITY_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EntryCapacityEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTotal());
        stmt.bindLong(3, entity.getIndoor());
        stmt.bindLong(4, entity.getOutdoor());
        stmt.bindLong(5, entity.getSeated());
        stmt.bindLong(6, entity.getCocktail());
        stmt.bindLong(7, entity.getGroup());
        stmt.bindLong(8, entity.getRoomCount());
        stmt.bindLong(9, entity.getDisabledCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EntryCapacityEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTotal());
        stmt.bindLong(3, entity.getIndoor());
        stmt.bindLong(4, entity.getOutdoor());
        stmt.bindLong(5, entity.getSeated());
        stmt.bindLong(6, entity.getCocktail());
        stmt.bindLong(7, entity.getGroup());
        stmt.bindLong(8, entity.getRoomCount());
        stmt.bindLong(9, entity.getDisabledCount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EntryCapacityEntity readEntity(Cursor cursor, int offset) {
        EntryCapacityEntity entity = new EntryCapacityEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // total
            cursor.getInt(offset + 2), // indoor
            cursor.getInt(offset + 3), // outdoor
            cursor.getInt(offset + 4), // seated
            cursor.getInt(offset + 5), // cocktail
            cursor.getInt(offset + 6), // group
            cursor.getInt(offset + 7), // roomCount
            cursor.getInt(offset + 8) // disabledCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EntryCapacityEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTotal(cursor.getInt(offset + 1));
        entity.setIndoor(cursor.getInt(offset + 2));
        entity.setOutdoor(cursor.getInt(offset + 3));
        entity.setSeated(cursor.getInt(offset + 4));
        entity.setCocktail(cursor.getInt(offset + 5));
        entity.setGroup(cursor.getInt(offset + 6));
        entity.setRoomCount(cursor.getInt(offset + 7));
        entity.setDisabledCount(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EntryCapacityEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EntryCapacityEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EntryCapacityEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
