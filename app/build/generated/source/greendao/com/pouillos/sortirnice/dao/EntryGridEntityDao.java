package com.pouillos.sortirnice.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.pouillos.sortirnice.entities.entry.join.JoinEntryOpeningEntityWithEntryGridEntity;

import com.pouillos.sortirnice.entities.entry.detail.EntryGridEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ENTRY_GRID_ENTITY".
*/
public class EntryGridEntityDao extends AbstractDao<EntryGridEntity, Long> {

    public static final String TABLENAME = "ENTRY_GRID_ENTITY";

    /**
     * Properties of entity EntryGridEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OpeningDays = new Property(1, String.class, "openingDays", false, "OPENING_DAYS");
        public final static Property OpeningHours = new Property(2, String.class, "openingHours", false, "OPENING_HOURS");
    }

    private Query<EntryGridEntity> entryOpeningEntity_ListGridsQuery;

    public EntryGridEntityDao(DaoConfig config) {
        super(config);
    }
    
    public EntryGridEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ENTRY_GRID_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OPENING_DAYS\" TEXT," + // 1: openingDays
                "\"OPENING_HOURS\" TEXT);"); // 2: openingHours
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ENTRY_GRID_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EntryGridEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String openingDays = entity.getOpeningDays();
        if (openingDays != null) {
            stmt.bindString(2, openingDays);
        }
 
        String openingHours = entity.getOpeningHours();
        if (openingHours != null) {
            stmt.bindString(3, openingHours);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EntryGridEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String openingDays = entity.getOpeningDays();
        if (openingDays != null) {
            stmt.bindString(2, openingDays);
        }
 
        String openingHours = entity.getOpeningHours();
        if (openingHours != null) {
            stmt.bindString(3, openingHours);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EntryGridEntity readEntity(Cursor cursor, int offset) {
        EntryGridEntity entity = new EntryGridEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // openingDays
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // openingHours
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EntryGridEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOpeningDays(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOpeningHours(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EntryGridEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EntryGridEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EntryGridEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "listGrids" to-many relationship of EntryOpeningEntity. */
    public List<EntryGridEntity> _queryEntryOpeningEntity_ListGrids(Long entryOpeningEntityId) {
        synchronized (this) {
            if (entryOpeningEntity_ListGridsQuery == null) {
                QueryBuilder<EntryGridEntity> queryBuilder = queryBuilder();
                queryBuilder.join(JoinEntryOpeningEntityWithEntryGridEntity.class, JoinEntryOpeningEntityWithEntryGridEntityDao.Properties.EntryGridEntityId)
                    .where(JoinEntryOpeningEntityWithEntryGridEntityDao.Properties.EntryOpeningEntityId.eq(entryOpeningEntityId));
                entryOpeningEntity_ListGridsQuery = queryBuilder.build();
            }
        }
        Query<EntryGridEntity> query = entryOpeningEntity_ListGridsQuery.forCurrentThread();
        query.setParameter(0, entryOpeningEntityId);
        return query.list();
    }

}
