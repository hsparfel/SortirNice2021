package com.pouillos.sortirnice.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.pouillos.sortirnice.entities.entry.join.JoinEntryEntityWithEntryTariffEntity;

import com.pouillos.sortirnice.entities.entry.detail.EntryTariffEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ENTRY_TARIFF_ENTITY".
*/
public class EntryTariffEntityDao extends AbstractDao<EntryTariffEntity, Long> {

    public static final String TABLENAME = "ENTRY_TARIFF_ENTITY";

    /**
     * Properties of entity EntryTariffEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Unique = new Property(2, int.class, "unique", false, "UNIQUE");
        public final static Property Min = new Property(3, int.class, "min", false, "MIN");
        public final static Property Max = new Property(4, int.class, "max", false, "MAX");
        public final static Property Average = new Property(5, int.class, "average", false, "AVERAGE");
        public final static Property Fixed = new Property(6, int.class, "fixed", false, "FIXED");
    }

    private Query<EntryTariffEntity> entryEntity_ListTariffsQuery;

    public EntryTariffEntityDao(DaoConfig config) {
        super(config);
    }
    
    public EntryTariffEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ENTRY_TARIFF_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"UNIQUE\" INTEGER NOT NULL ," + // 2: unique
                "\"MIN\" INTEGER NOT NULL ," + // 3: min
                "\"MAX\" INTEGER NOT NULL ," + // 4: max
                "\"AVERAGE\" INTEGER NOT NULL ," + // 5: average
                "\"FIXED\" INTEGER NOT NULL );"); // 6: fixed
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ENTRY_TARIFF_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EntryTariffEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getUnique());
        stmt.bindLong(4, entity.getMin());
        stmt.bindLong(5, entity.getMax());
        stmt.bindLong(6, entity.getAverage());
        stmt.bindLong(7, entity.getFixed());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EntryTariffEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getUnique());
        stmt.bindLong(4, entity.getMin());
        stmt.bindLong(5, entity.getMax());
        stmt.bindLong(6, entity.getAverage());
        stmt.bindLong(7, entity.getFixed());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EntryTariffEntity readEntity(Cursor cursor, int offset) {
        EntryTariffEntity entity = new EntryTariffEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // unique
            cursor.getInt(offset + 3), // min
            cursor.getInt(offset + 4), // max
            cursor.getInt(offset + 5), // average
            cursor.getInt(offset + 6) // fixed
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EntryTariffEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUnique(cursor.getInt(offset + 2));
        entity.setMin(cursor.getInt(offset + 3));
        entity.setMax(cursor.getInt(offset + 4));
        entity.setAverage(cursor.getInt(offset + 5));
        entity.setFixed(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EntryTariffEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EntryTariffEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EntryTariffEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "listTariffs" to-many relationship of EntryEntity. */
    public List<EntryTariffEntity> _queryEntryEntity_ListTariffs(Long entryEntityId) {
        synchronized (this) {
            if (entryEntity_ListTariffsQuery == null) {
                QueryBuilder<EntryTariffEntity> queryBuilder = queryBuilder();
                queryBuilder.join(JoinEntryEntityWithEntryTariffEntity.class, JoinEntryEntityWithEntryTariffEntityDao.Properties.EntryTariffEntityId)
                    .where(JoinEntryEntityWithEntryTariffEntityDao.Properties.EntryEntityId.eq(entryEntityId));
                entryEntity_ListTariffsQuery = queryBuilder.build();
            }
        }
        Query<EntryTariffEntity> query = entryEntity_ListTariffsQuery.forCurrentThread();
        query.setParameter(0, entryEntityId);
        return query.list();
    }

}
